import os
import pickle
import pandas as pd
import matplotlib.pyplot as plt
import re
from my_utils import color_dict, tech_names, print_red, print_cyan, print_green, print_magenta, print_blue, print_yellow, select_pickle
from order_cap import wind, PV, baseload, peak, CCS, CHP, midload, hydro, PtH, order_cap, order_cap2, order_cap3
from datetime import datetime

from figure_cap_hedgedscenarios import load_data, custom_sort, group_technologies, prettify_scenario_name

def create_whisker_plots(grouped_data, pickle_timestamp, techs_to_plot=None):
    if techs_to_plot is None:
        techs_to_plot = ["PV", "Wind", "U", "WG", "Peak", "H2store", "bat"]  # Default technologies
    tech_labels = [tech_names.get(tech, tech) for tech in techs_to_plot]
    
    contains_HP_sets = any("HP" in s.split("_")[0] for s in grouped_data)
    contains_nonHP_sets = any("opt" in s.split("_")[0] for s in grouped_data)
    
    # Extract the reference levels for 'allyears'
    reference_levels = grouped_data.get("allyears", pd.Series(dtype=float))

    # Normalize the data such that the reference levels become 1
    normalized_grouped_data = {key: data.div(reference_levels, axis=0).filter(items=techs_to_plot, axis=0) for key, data in grouped_data.items() if key != "allyears"}
    reference_levels = reference_levels.filter(items=techs_to_plot, axis=0).div(reference_levels, axis=0)  # Should be all ones now

    # Create a directory for the whisker plots if it doesn't already exist
    if not os.path.exists('figures/whisker_plots'):
        os.makedirs('figures/whisker_plots')

    # Split the normalized data into individual years and sets of years
    individual_years_data = {key: data for key, data in normalized_grouped_data.items() if 'singleyear' in key}
    HPsets_of_years_data = {key: data for key, data in normalized_grouped_data.items() if 'singleyear' not in key and "HP" in key.split("_")[0]}
    nonHPsets_of_years_data = {key: data for key, data in normalized_grouped_data.items() if 'singleyear' not in key and "opt" in key.split("_")[0]}

    # Filter for selected technologies
    individual_years_df = pd.DataFrame(individual_years_data)
    HPsets_of_years_df = pd.DataFrame(HPsets_of_years_data)
    nonHPsets_of_years_df = pd.DataFrame(nonHPsets_of_years_data)

    # Extract the values for the scenario 'singleyear_1989-1990'
    scenario_1989_1990_values = individual_years_df['singleyear_1989-1990']

    # Print the dataframes
    #print(f"{grouped_data.items()=}")
    print_yellow(f"Individual years data: \n{individual_years_df}")
    print_yellow(f"Sets of years data: \n{HPsets_of_years_df}")
    #print_yellow(f"Reference levels: \n{reference_levels}")

    # Create a figure for the whisker plots
    nr_of_plots = 1+contains_HP_sets+contains_nonHP_sets
    fig, axs = plt.subplots(nrows=nr_of_plots, ncols=1, figsize=(8, 2+2*nr_of_plots))

    # Whisker settings
    whisker_props = dict(whis=1.5, showfliers=True, sym="o")  # adjust as needed

    plot_idx = 0
    # Generate whisker plots for individual years
    axs[0].boxplot(individual_years_df.T, labels=tech_labels, vert=True, patch_artist=True, **whisker_props)
    axs[0].set_title(f'{len(individual_years_df.columns)} individual weather-years')
    axs[0].set_ylabel('Normalized capacity')
    axs[0].axhline(y=1, color='black', linestyle='-', linewidth=0.7)  # thin horizontal line
    plot_idx += 1

    # Generate whisker plots for sets of years
    if contains_HP_sets:
        axs[plot_idx].boxplot(HPsets_of_years_df.T, labels=tech_labels, vert=True, patch_artist=True, **whisker_props)
        axs[plot_idx].set_title(f'{len(HPsets_of_years_df.columns)} weather-year sets (with hand-picking)')
        axs[plot_idx].set_ylabel('Normalized capacity')
        axs[plot_idx].axhline(y=1, color='black', linestyle='-', linewidth=0.7)  # thin horizontal line
        plot_idx += 1
    if contains_nonHP_sets:
        axs[plot_idx].boxplot(nonHPsets_of_years_df.T, labels=tech_labels, vert=True, patch_artist=True, **whisker_props)
        axs[plot_idx].set_title(f'{len(nonHPsets_of_years_df.columns)} weather-year sets (without hand-picking)')
        axs[plot_idx].set_ylabel('Normalized capacity')
        axs[plot_idx].axhline(y=1, color='black', linestyle='-', linewidth=0.7)

    # Plot red 'X' markers for 'singleyear_1989-1990'
    for idx, tech in enumerate(techs_to_plot):
        if tech in scenario_1989_1990_values:
            #axs[0].plot(idx + 1, scenario_1989_1990_values[tech], 'rx')  # 'rx' is red 'X' marker
            #axs[1].plot(idx + 1, scenario_1989_1990_values[tech], 'rx')  # 'rx' is red 'X' marker
            None

    # Set the same y-limits for both axes
    y_lims = [min(ax.get_ylim()[0] for ax in axs), max(ax.get_ylim()[1] for ax in axs)]
    for ax in axs:
        ax.set_ylim(y_lims)

    # Add overall title and adjust layout
    #fig.suptitle('Box plots of installed capacity (normalized to All years)')
    #fig.tight_layout(rect=[0, 0.03, 1, 0.95])
    fig.tight_layout()

    # Save the figure
    fig_name_base = f"figures/capacity/boxplots/{pickle_timestamp}"
    os.makedirs(os.path.dirname(fig_name_base), exist_ok=True)
    fig_num = 1
    while os.path.exists(f"{fig_name_base}_{fig_num}.png"):
        fig_num += 1
    fig.savefig(f"{fig_name_base}_{fig_num}.png", dpi=300)
    fig.savefig(f"{fig_name_base}_{fig_num}.svg")  # or .eps for EPS format
    plt.close(fig)

    # Log the success message
    print(f"Normalized whisker plots saved as '{fig_name_base}_{fig_num}.png'.")


def main():
    print_blue(f"Script started at: {datetime.now()}")
    
    #user_input = input("Press ENTER to go with default options or type anything to be prompted for choices along the way: ")
    #use_defaults = user_input.strip() == ""  # This will be True if the user just pressed enter

    print_blue(f"Script started at: {datetime.now()}")
    pickle_file = select_pickle(predetermined_choice="combine")
    if isinstance(pickle_file, list):
        # use the most recently modified pickle file to determine the timestamp
        pickle_file_for_timestamp = sorted(pickle_file, key=os.path.getmtime)[-1]
        pickle_timestamp = "agg"+os.path.basename(pickle_file_for_timestamp).replace(".pickle", "").replace("data_results_", "")
    else:
        pickle_timestamp = os.path.basename(pickle_file).replace(".pickle", "").replace("data_results_", "")
    print_cyan(f"Selected pickle file: {pickle_file}")
    
    cap_data = load_data(pickle_file, use_defaults="skip")
    bio_data = load_data(pickle_file, use_defaults="skip", data_key=)
    print_yellow(f"Data loaded from pickle file")
    grouped_data = group_technologies(data)
    print_green(f"Technologies grouped successfully")
    print_yellow(f"Grouped data: \n{grouped_data}")
    create_whisker_plots(grouped_data, pickle_timestamp)
    #print_magenta(f"Figures created and saved in {figures_folder}")
    
    print_red(f"Script finished at: {datetime.now()}")

if __name__ == "__main__":
    main()